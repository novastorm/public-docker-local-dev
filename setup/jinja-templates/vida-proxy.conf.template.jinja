{{ "# THIS vida-proxy.conf.template FILE IS AUTOGENERATED BY THE environment-update.sh script" }}
{{ "# you should update by modifying environment-config.yaml and re-running environment-update.sh" }}

# this is an nginx configuration template (see "Using environment variables in nginx configuration"
# at https://hub.docker.com/_/nginx
# It should be hooked up to the .env file used by docker-compose, so should not need to be edited when
# you deploy services outside of docker-compose in debug mode

# Note that when we define upstreams, we use the *internal* port of the service, the one defined
# by their EXPOSE command in their docker image, not the *external* port that docker-compose
# sets up port forwarding to


{% if "webserver" in in_docker or "webserver" in outside_of_docker %}
upstream webserver {
    server ${WEBSERVER_HOST}:${WEBSERVER_INTERNAL_PORT};
    include upstream_params;
}
{% endif %}

{% if "microservice" in in_docker or "microservice" in outside_of_docker %}
upstream microservice {
    server ${MICROSERVICE_HOST}:${MICROSERVICE_INTERNAL_PORT};
    include upstream_params;
}
{% endif %}

{% if "snowplow" in in_docker or "snowplow" in outside_of_docker %}
upstream snowplow {
    server snowplow:9090;
    include upstream_params;
}
{% endif %}

# this extra config is needed to configure the socket-service correctly,
# following the example from https://www.nginx.com/blog/websocket-nginx/
# modified to pass '' through, as that matches what is generated by the ingres-nginx in production
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' '';
}


server {
    listen       ${VIDA_PROXY_INTERNAL_PORT};
    listen  [::]:${VIDA_PROXY_INTERNAL_PORT};
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    {% if "webserver" in in_docker or "webserver" in outside_of_docker %}
    location / {
        include proxy_params;
        proxy_pass http://webserver;
    }
    {% endif %}

    {% if "microservice" in in_docker or "microservice" in outside_of_docker %}
    location /microservice/ {
        include proxy_params;
        # microservice is not expecting to run behind a proxy
        # so we need to include the trailing / so that the forwarded request removes the /microservice/
        proxy_pass http://microservice/;
    }

    location /microservice-broken/ {
        include proxy_params;
        proxy_pass http://microservice;
    }
    {% endif %}

    {% if "snowplow" in in_docker or "snowplow" in outside_of_docker %}
    location /snowplow/ {
        include proxy_params;
        proxy_pass http://snowplow/;
    }
    {% endif %}

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    #error_page   500 502 503 504  /50x.html;
    #location = /50x.html {
    #    root   /usr/share/nginx/html;
    #}

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
