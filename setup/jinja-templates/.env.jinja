{{ "# THIS .env FILE IS AUTOGENERATED BY THE environment-update.sh script" }}
{{ "# you should update by modifying environment-config.yaml and re-running environment-update.sh" }}

# This environment file is shared by all the containers running in docker
# It contains the network addresses of all the services, so they can be configured to talk with each other

# TODO Remove EXTERNAL_PORT from everything except vida-proxy and the dbs/rabbits
# all services should be reached through vida-proxy???

VIDA_PROXY_INTERNAL_PORT="80"
VIDA_PROXY_EXTERNAL_PORT="9000"

NGROK_BASE_URL="https://{{ ngrok_subdomain }}.ngrok.io"



# -------BEGIN WEBSERVER----------
{% if "webserver" in in_docker %}
WEBSERVER_HOST="webserver"
WEBSERVER_INTERNAL_PORT="8001"
{% elif "webserver" in outside_of_docker %}
WEBSERVER_HOST="host.docker.internal"
WEBSERVER_INTERNAL_PORT="8001"
{% endif %}
WEBSERVER_EXTERNAL_PORT="9001"
{% if "webserver-celery" in in_docker %}
WEBSERVER_CELERY_TASK_ALWAYS_EAGER="False"
{% else %}
WEBSERVER_CELERY_TASK_ALWAYS_EAGER="True"
{% endif %}
# -------END WEBSERVER----------


# -------BEGIN MICROSERVICE----------
{% if "microservice" in in_docker %}
MICROSERVICE_HOST="microservice"
MICROSERVICE_INTERNAL_PORT="8002"
{% elif "microservice" in outside_of_docker %}
MICROSERVICE_HOST="host.docker.internal"
MICROSERVICE_INTERNAL_PORT="8002"
{% endif %}
MICROSERVICE_EXTERNAL_PORT="9002"
{% if "microservice-celery" in in_docker %}
MICROSERVICE_CELERY_TASK_ALWAYS_EAGER="False"
{% else %}
MICROSERVICE_CELERY_TASK_ALWAYS_EAGER="True"
{% endif %}
# -------END MICROSERVICE----------


# ---------BEGIN SPLIT SYNCHRONIZER----------
{% if "split-synchronizer" in in_docker %}
SPLIT_REDIS_HOST="split-synchronizer-redis"
# don't change this without also changing the redis docker image to run on a different port
SPLIT_REDIS_PORT="6379"
SPLIT_REDIS_PASSWORD="split-sync-local-dev-redis-pw"
{% else %}
SPLIT_REDIS_HOST=""
SPLIT_REDIS_PORT=""
SPLIT_REDIS_PASSWORD=""
{% endif %}
# ---------END SPLIT SYNCHRONIZER----------

# For the "infrastructure" pieces, choose ports in the 10000 range to try and avoid conflicts if they are running
# on the host directly
MYSQL_EXTERNAL_PORT="13306"
POSTGRES_EXTERNAL_PORT="15432"
RABBITMQ_AMQP_EXTERNAL_PORT="35672"
RABBITMQ_HTTP_EXTERNAL_PORT="25672"
SNOWPLOW_EXTERNAL_PORT="10005"
REDIS_EXTERNAL_PORT="16379"
SPLIT_REDIS_EXTERNAL_PORT="10007"
SPLIT_SYNCHRONIZER_ADMIN_EXTERNAL_PORT="10008"

# Other shared configuration
REDIS_PASSWORD=local-dev-redis-pw

# these need to match the values in rabbitmq.conf
RABBIT_MQ_USER=defaultrabbituser
RABBIT_MQ_PASSWORD=password
SERVICE1_RABBIT_MQ_USER=service1user
SERVICE1_RABBIT_MQ_PASSWORD=service1pass
SERVICE1_RABBIT_MQ_VHOST=service1vhost
SERVICE2_RABBIT_MQ_USER=service2user
SERVICE2_RABBIT_MQ_PASSWORD=service2pass
SERVICE2_RABBIT_MQ_VHOST=service2vhost


# Capture and send datadog traces.  Only enabled if you also are running the agent
DD_TRACE_ENABLED={{ "datadog" in in_docker }}

# Generate and send snowplow events
SNOWPLOW_ENABLED={{ "snowplow" in in_docker }}

# TODO Figure out a better location for these api keys
#DD_API_KEY=
#SPLIT_API_KEY=

COMPOSE_PROJECT_NAME=public-docker-local-dev
